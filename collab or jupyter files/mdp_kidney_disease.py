# -*- coding: utf-8 -*-
"""MDP-KIDNEY DISEASE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X1PEpJN-lib2cW7n-0rUEPeuzt4ksOEg

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the csv data to a Pandas DataFrame
kidney_data = pd.read_csv('/content/kidney.csv')

# print first 5 rows of the dataset
kidney_data.head()

# print last 5 rows of the dataset
kidney_data.tail()

# number of rows and columns in the dataset
kidney_data.shape

# dropping id column
kidney_data.drop('id', axis = 1, inplace = True)

# number of rows and columns in the dataset
kidney_data.shape

# statistical measures about the data
kidney_data.describe()

# getting some info about the data
kidney_data.info()

# checking for missing values
kidney_data.isnull().sum()

# converting necessary columns to numerical type

kidney_data['pcv'] = pd.to_numeric(kidney_data['pcv'], errors='coerce')
kidney_data['wc'] = pd.to_numeric(kidney_data['wc'], errors='coerce')
kidney_data['rc'] = pd.to_numeric(kidney_data['rc'], errors='coerce')

# getting some info about the data
kidney_data.info()

# Extracting categorical and numerical columns

cat_cols = [col for col in kidney_data.columns if kidney_data[col].dtype == 'object']
num_cols = [col for col in kidney_data.columns if kidney_data[col].dtype != 'object']

# looking at unique values in categorical columns

for col in cat_cols:
    print(f"{col} has {kidney_data[col].unique()} values\n")

# replace incorrect values

kidney_data['dm'].replace(to_replace = {'\tno':'no','\tyes':'yes',' yes':'yes'},inplace=True)

kidney_data['cad'] = kidney_data['cad'].replace(to_replace = '\tno', value='no')

kidney_data['classification'] = kidney_data['classification'].replace(to_replace = {'ckd\t': 'ckd', 'notckd': 'not ckd'})

kidney_data['classification'] = kidney_data['classification'].map({'ckd': 0, 'not ckd': 1})
kidney_data['classification'] = pd.to_numeric(kidney_data['classification'], errors='coerce')

cols = ['dm', 'cad', 'classification']

for col in cols:
    print(f"{col} has {kidney_data[col].unique()} values\n")

# checking the distribution of Target Variable
kidney_data['classification'].value_counts()

"""0 --> no ckd
1 --> ckd
"""

for col in cat_cols:
    print(f"{col} has {kidney_data[col].nunique()} categories\n")

label_encoder = LabelEncoder()
for col in ['rbc', 'pc', 'pcc', 'ba', 'htn', 'dm', 'cad', 'appet', 'pe', 'ane']:
         kidney_data[col] = label_encoder.fit_transform(kidney_data[col])

kidney_data.head()

"""Splitting the Features and Target"""

X = kidney_data.drop(columns='classification', axis=1)
Y = kidney_data['classification']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

xgboost
"""

model = XGBClassifier()

# training the xgboost model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print("*Confusion Matrix for XGB: ")
print(confusion_matrix(X_train_prediction, Y_train))

print("*classification report for XGB: ")
print(classification_report(X_train_prediction, Y_train))

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2,0,0,140,268,0,0,160,0,3.6,0,2,)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('no ckd')
else:
  print('kcd')

import pickle

filename = 'kidney_disease_model.sav'
pickle.dump(model, open(filename, 'wb'))

# loading the saved model
loaded_model = pickle.load(open('kidney_disease_model.sav', 'rb'))

for column in X.columns:
  print(column)